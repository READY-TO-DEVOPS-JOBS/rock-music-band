pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('del-docker-hub-auth')
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Clean Environment') {
            steps {
                sh 'docker system prune -fa || true'
            }
        } 
        
       stage('checkout') {
            steps {
                git branch: 'main', 
                    credentialsId: 'github-ssh', 
                    url: 'https://github.com/READY-TO-DEVOPS-JOBS/rock-music-band.git'
            }
        }
        
       stage('Install Dependencies') {
         agent {
          docker { image 'node:18-alpine'
            args '-u root'  }
    }
    steps {
        script {
            dir('node-ex-website') {
                sh 'npm install'
            }
        }
    }
}


        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'del-docker-hub-auth', usernameVariable: 'DOCKERHUB_CREDENTIALS_USR', passwordVariable: 'DOCKERHUB_CREDENTIALS_PSW')]) {
                    sh 'docker login -u $DOCKERHUB_CREDENTIALS_USR -p $DOCKERHUB_CREDENTIALS_PSW'
                }
            }
        }

       stage('test') {
            agent {
                docker { image 'node:22.4' 
                args '-u root' }
            }
            steps {
                sh'''
                cd node-ex-website
                npm install 
                npm test --passWithNoTests || true
                '''
            }
        }

        stage('File System Scan') {
            agent {
                docker { 
                    image 'bitnami/trivy:latest' 
                    args '--entrypoint="" -u root'
                }
            }

            steps {
                sh ''' 
                cd node-ex-website
                trivy fs --format table -o trivy-fs-report.html .
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('node-ex-website') {
                    sh 'docker build -t devopseasylearning/s5wesley-rock-music-band:v$BUILD_NUMBER .'
                }
            }
        }

               stage('Docker Image Scan') {
            agent {
                docker {
                    image 'bitnami/trivy:latest'
                    args '-u root --entrypoint=""'
                }
            }

            steps {
                // Scan the  image
                sh "trivy image --format table -o trivy-image-report.html devopseasylearning/s5wesley-rock-music-band:v$BUILD_NUMBER"

            }
        }

        stage('Push Docker Image') {
            steps {
                sh 'docker push devopseasylearning/s5wesley-rock-music-band:v$BUILD_NUMBER'
            }
        }

       stage('trigger-deployment') {
    agent { 
        label 'deploy' 
    }
    steps {
        sh '''
            TAG=${BUILD_NUMBER}
            rm -rf rock-band-deployment || true
            git clone https://github.com/s5wesley/rock-band-deployment.git 
            cd rock-band-deployment/chart
            # Update the image repository and tag
            yq eval '.Values.repository.assets.image = "s5wesley-rock-music-band"' -i values.yaml
            yq eval '.Values.repository.tag = "'"$TAG"'"' -i values.yaml
            
            # Configure Git for commit
            git config --global user.name "devopseasylearning"
            git config --global user.email info@devopseasylearning.com

            # Add and commit changes if necessary
            git add -A
            if git diff-index --quiet HEAD; then
               echo "No changes to commit"
            else
               git commit -m "updating s5wesley-rock-music-band to ${TAG}"
               git push origin main
            fi
        ''' 
    }   
}


        stage('Display Server IP') {
            steps {
                sh 'curl ifconfig.io'
            }
        }
    }
}